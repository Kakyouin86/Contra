Changes to do in each new update:

--> Corgi Engine\Common\Scripts\Environment\Ladder.cs Line 14 should be:
public enum LadderTypes { Simple, BiDirectional, Horizontal } //Leo Monge: Need to ALWAYS bring it after update.

--> Corgi Engine\Common\Scripts\Agents\CorgiController\CharacterWallClinging.cs Line 20 should be:
[Range(0.0000000001f, 1)]//Leo Monge: Need to ALWAYS bring it after update. it was 0.01f originally. With this small value, you can't detach from the wall.

--> Corgi Engine\Common\Scripts\Agents\CorgiController\CharacterLadder.cs line 79 should be:
//_boxCollider = this.gameObject.GetComponentInParent<BoxCollider2D>();//Leo Monge: Need to ALWAYS bring it after update.
GameObject ladderColliderObject = GameObject.FindGameObjectWithTag("LadderCollider");//Leo Monge: Need to ALWAYS bring it after update. This adds the collider of the Ladder Collider only.
if (ladderColliderObject != null)//Leo Monge: Need to ALWAYS bring it after update. This adds the collider of the Ladder Collider only.
{
_boxCollider = ladderColliderObject.GetComponent<BoxCollider2D>();//Leo Monge: Need to ALWAYS bring it after update. This adds the collider of the Ladder Collider only.
}

--> Corgi Engine\Common\Scripts\Agents\Weapons\WeaponAim.cs line 165 should be:
            projectileWeapon = _weapon.GetComponent<ProjectileWeapon>(); //Leo Monge: Need to ALWAYS bring it after update. 
            originalProjectiles = projectileWeapon.ProjectilesPerShot; //Leo Monge: Need to ALWAYS bring it after update. 

--> Corgi Engine\Common\Scripts\Agents\Weapons\WeaponAim.cs line 23 should be:
        public Quaternion oldRotation; //Leo Monge: Need to ALWAYS bring it after update.
        public Quaternion commonRotation; //Leo Monge: Need to ALWAYS bring it after update.
        public ProjectileWeapon projectileWeapon; //Leo Monge: Need to ALWAYS bring it after update.
        public int originalProjectiles ;//Leo Monge: Need to ALWAYS bring it after update.

--> Corgi Engine\Common\Scripts\Agents\Weapons\WeaponAim.cs line 446 should be:
        protected virtual void RotateWeapon(Quaternion newRotation)
        {
			commonRotation = newRotation;
            if (GameManager.Instance.Paused)
            {
                return;
            }
			// if the rotation speed is == 0, we have instant rotation
            if (WeaponRotationSpeed == 0 && oldRotation != commonRotation)
            {
                projectileWeapon.ProjectilesPerShot = 0; //Leo Monge: Need to ALWAYS bring it after update.
                transform.rotation = commonRotation;
                StartCoroutine(DelayInShotWhenRotating()); //Leo Monge: Need to ALWAYS bring it after update.
                oldRotation = commonRotation; //Leo Monge: Need to ALWAYS bring it after update.
            }
            // otherwise we lerp the rotation
            else if (WeaponRotationSpeed != 0)
            {
                StartCoroutine(DelayInShotWhenRotating()); //Leo Monge: Need to ALWAYS bring it after update.
                transform.rotation = Quaternion.Lerp(transform.rotation, commonRotation, WeaponRotationSpeed * Time.fixedDeltaTime); //Leo Monge: Need to ALWAYS bring it after update. It was Time.deltaTime
				oldRotation = transform.rotation;
            }

            if (InstantFlip && (WasFacingRightLastFrame != _weapon.Owner.IsFacingRight) && oldRotation != commonRotation)
            {
                projectileWeapon.ProjectilesPerShot = 0; //Leo Monge: Need to ALWAYS bring it after update.
                transform.rotation = commonRotation;
                StartCoroutine(DelayInShotWhenRotating()); //Leo Monge: Need to ALWAYS bring it after update.
                oldRotation = commonRotation; //Leo Monge: Need to ALWAYS bring it after update.
            }
		}

        IEnumerator DelayInShotWhenRotating()//Leo Monge: Need to ALWAYS bring it after update.
        {
            yield return new WaitForSeconds(0.005f);
            projectileWeapon.ProjectilesPerShot = originalProjectiles;
        }

--> Corgi Engine\Common\Scripts\Managers\InputManager.cs should have all variables public

--> Rewired\Integration\CorgiEngine\Scripts\RewiredCorgiEngineInputManager.cs line 153 should be:
public override void SetMovement() //Leo Monge: You need this code so the joystick detects absolute values.
{
if (!_initialized)
{
base.SetMovement();
return;
}
if (SmoothMovement)
{
_primaryMovement.x = _rewiredPlayer.GetAxis(_rewiredActionId_horizontal);
_primaryMovement.y = _rewiredPlayer.GetAxis(_rewiredActionId_vertical);

// Normalize _primaryMovement
_primaryMovement.x = Mathf.Abs(_primaryMovement.x) > 0.1f ? Mathf.Sign(_primaryMovement.x) : 0f;
_primaryMovement.y = Mathf.Abs(_primaryMovement.y) > 0.1f ? Mathf.Sign(_primaryMovement.y) : 0f;
}
else
{
_primaryMovement.x = _rewiredPlayer.GetAxisRaw(_rewiredActionId_horizontal);
_primaryMovement.y = _rewiredPlayer.GetAxisRaw(_rewiredActionId_vertical);

// Normalize _primaryMovement
_primaryMovement.x = _primaryMovement.x != 0f ? Mathf.Sign(_primaryMovement.x) : 0f;
_primaryMovement.y = _primaryMovement.y != 0f ? Mathf.Sign(_primaryMovement.y) : 0f;
}
}

--> Tags:
  - LevelBounds
  - Music
  - Background
  - NoMask
  - HorizontalLadder
  - UpwardSlope
  - DownwardSlope
  - LadderCollider
  - Water
  - FireIndicator
  - Firepoint
  - SlopesDetector
  - PlayerSprites
  - WeaponAim
  - Torso
  - Legs
  - MachineGunLights

--> Firepoint animations:
"Torso Idle"
"Shoot Straight"
"Shoot Straight Walking"
"Hold Diagonal Up"
"Shoot Diagonal Up"
"Torso Walking Diagonal Up"
"Shoot Diagonal Up Walking"
"Shoot Up"
"Hold Up"
"Hold Diagonal Down"
"Shoot Diagonal Down"
"Torso Walking Diagonal Down"
"Shoot Diagonal Down Walking"
"Shoot Down"
"Hold Down"
"Jumping"
"Crouch"
"Crouch Shooting"
"Climb Idle"
"Climb Shooting Forward"
"Climb Hold Back"
"Climb Shooting Back"
"Climb Hold Diagonal Up Forward"
"Climb Shooting Diagonal Up Forward"
"Climb Hold Up"
"Climb Shooting Up"
"Climb Hold Diagonal Up Back"
"Climb Shooting Diagonal Up Back"
"Climb Hold Diagonal Down Forward"
"Climb Shooting Diagonal Down Forward"
"Climb Hold Down"
"Climb Shooting Down"
"Climb Hold Diagonal Down Back"
"Climb Shooting Diagonal Down Back"
"Horizontal Ladder Shooting Back"
"Horizontal Ladder Shooting Forward"
"Horizontal Ladder Idle"
"Horizontal Ladder Hold Forward"
"Horizontal Ladder Hold Back"
"Horizontal Ladder Hold Diagonal Up Forward"
"Horizontal Ladder Shooting Diagonal Up Forward"
"Horizontal Ladder Hold Up"
"Horizontal Ladder Shooting Up"
"Horizontal Ladder Hold Back Diagonal Up"
"Horizontal Ladder Shooting Diagonal Up Back"
"Horizontal Ladder Hold Diagonal Down Forward"
"Horizontal Ladder Shooting Diagonal Down Forward"
"Horizontal Ladder Hold Down"
"Horizontal Ladder Shooting Down"
"Horizontal Ladder Hold Diagonal Down Back"
"Horizontal Ladder Shooting Diagonal Down Back"

--> Firepoint animations for Strict Mode:
"Climb Hold Back"
"Climb Shooting Back" 
"Climb Shooting Forward"
"Horizontal Ladder Shooting Back"
"Horizontal Ladder Shooting Forward"



--> OLD!!!! Corgi Engine\Common\Scripts\Agents\Weapons\WeaponAim.cs line 446 should be:
        protected virtual void RotateWeapon(Quaternion newRotation)
        {
            if (GameManager.Instance.Paused)
            {
                return;
            }
			// if the rotation speed is == 0, we have instant rotation
            if (WeaponRotationSpeed == 0 && oldRotation != newRotation)
            {
                projectileWeapon.ProjectilesPerShot = 0; //Leo Monge: Need to ALWAYS bring it after update.
                transform.rotation = newRotation;
                StartCoroutine(DelayInShotWhenRotating()); //Leo Monge: Need to ALWAYS bring it after update.
                oldRotation = newRotation; //Leo Monge: Need to ALWAYS bring it after update.
            }
            // otherwise we lerp the rotation
            else if (WeaponRotationSpeed != 0)
            {
                StartCoroutine(DelayInShotWhenRotating()); //Leo Monge: Need to ALWAYS bring it after update.
                transform.rotation = Quaternion.Lerp(transform.rotation, newRotation, WeaponRotationSpeed * Time.fixedDeltaTime); //Leo Monge: Need to ALWAYS bring it after update. It was Time.deltaTime
            }

            if (InstantFlip && (WasFacingRightLastFrame != _weapon.Owner.IsFacingRight) && oldRotation != newRotation)
            {
                projectileWeapon.ProjectilesPerShot = 0; //Leo Monge: Need to ALWAYS bring it after update.
                transform.rotation = newRotation;
                StartCoroutine(DelayInShotWhenRotating()); //Leo Monge: Need to ALWAYS bring it after update.
                oldRotation = newRotation; //Leo Monge: Need to ALWAYS bring it after update.
            }
		}

        IEnumerator DelayInShotWhenRotating()//Leo Monge: Need to ALWAYS bring it after update.
        {
            yield return new WaitForSeconds(0.005f);
            projectileWeapon.ProjectilesPerShot = originalProjectiles;
        }